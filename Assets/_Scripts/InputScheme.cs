//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/_Scripts/InputScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/_Scripts/InputScheme.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputScheme: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""InputScheme"",
    ""maps"": [
        {
            ""name"": ""Player1Movement"",
            ""id"": ""e1b67693-095b-44a5-8ff8-fb592d926415"",
            ""actions"": [
                {
                    ""name"": ""teamMovement"",
                    ""type"": ""Value"",
                    ""id"": ""a1001fe8-1bde-4fc3-a482-7ec01400d6e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectPreviousFinger"",
                    ""type"": ""Button"",
                    ""id"": ""2404969c-c171-4406-8044-219e47a470db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNextFinger"",
                    ""type"": ""Button"",
                    ""id"": ""11f0d13f-0213-4345-8929-9befbb70ac6e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""44f00d35-de11-4552-b7f2-74d00e94fec9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c10a4b65-3d03-4a43-a801-f08eb33c0748"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""481f1f69-3099-4dd9-af50-feece4df3314"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""287343a3-81e3-42e0-818f-6a2633b52410"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""df15260a-0371-4ea3-857e-1640a4752b38"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a0a2c51-0576-4ecf-b5da-f1bf748e5fe3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPreviousFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9ff092a-2c67-4d04-a3d7-6dec96a01964"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNextFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2Movement"",
            ""id"": ""78868ead-112a-48c2-9741-addfe600cca1"",
            ""actions"": [
                {
                    ""name"": ""teamMovement"",
                    ""type"": ""Value"",
                    ""id"": ""d7855ea1-d888-455f-b95d-77bad8efe01c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectPreviousFinger"",
                    ""type"": ""Button"",
                    ""id"": ""5581e424-119b-486b-ba5f-16175001dc23"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNextFinger"",
                    ""type"": ""Button"",
                    ""id"": ""3804ecdb-fefa-4ec1-b9f1-fdb5c5b11052"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""446f791c-b52a-4360-ae7b-a4cd1534021e"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPreviousFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""451535b7-b400-4baa-ab7e-2a3ab78c083e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""adeef421-ee11-439c-b795-20369ca1263b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""adcd0fa8-5eb0-43b3-b18d-1be9ea7cc829"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c4427525-9f1f-40c4-ab37-0e0f27f78fde"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""53e6e3ff-d2f1-4a63-ba76-e29984654e34"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teamMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1a929126-d93c-44bf-8a12-c0ae00a0ead9"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNextFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New Control Scheme"",
            ""bindingGroup"": ""New Control Scheme"",
            ""devices"": []
        }
    ]
}");
        // Player1Movement
        m_Player1Movement = asset.FindActionMap("Player1Movement", throwIfNotFound: true);
        m_Player1Movement_teamMovement = m_Player1Movement.FindAction("teamMovement", throwIfNotFound: true);
        m_Player1Movement_SelectPreviousFinger = m_Player1Movement.FindAction("SelectPreviousFinger", throwIfNotFound: true);
        m_Player1Movement_SelectNextFinger = m_Player1Movement.FindAction("SelectNextFinger", throwIfNotFound: true);
        // Player2Movement
        m_Player2Movement = asset.FindActionMap("Player2Movement", throwIfNotFound: true);
        m_Player2Movement_teamMovement = m_Player2Movement.FindAction("teamMovement", throwIfNotFound: true);
        m_Player2Movement_SelectPreviousFinger = m_Player2Movement.FindAction("SelectPreviousFinger", throwIfNotFound: true);
        m_Player2Movement_SelectNextFinger = m_Player2Movement.FindAction("SelectNextFinger", throwIfNotFound: true);
    }

    ~@InputScheme()
    {
        UnityEngine.Debug.Assert(!m_Player1Movement.enabled, "This will cause a leak and performance issues, InputScheme.Player1Movement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player2Movement.enabled, "This will cause a leak and performance issues, InputScheme.Player2Movement.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1Movement
    private readonly InputActionMap m_Player1Movement;
    private List<IPlayer1MovementActions> m_Player1MovementActionsCallbackInterfaces = new List<IPlayer1MovementActions>();
    private readonly InputAction m_Player1Movement_teamMovement;
    private readonly InputAction m_Player1Movement_SelectPreviousFinger;
    private readonly InputAction m_Player1Movement_SelectNextFinger;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player1Movement".
    /// </summary>
    public struct Player1MovementActions
    {
        private @InputScheme m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Player1MovementActions(@InputScheme wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player1Movement/teamMovement".
        /// </summary>
        public InputAction @teamMovement => m_Wrapper.m_Player1Movement_teamMovement;
        /// <summary>
        /// Provides access to the underlying input action "Player1Movement/SelectPreviousFinger".
        /// </summary>
        public InputAction @SelectPreviousFinger => m_Wrapper.m_Player1Movement_SelectPreviousFinger;
        /// <summary>
        /// Provides access to the underlying input action "Player1Movement/SelectNextFinger".
        /// </summary>
        public InputAction @SelectNextFinger => m_Wrapper.m_Player1Movement_SelectNextFinger;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player1Movement; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Player1MovementActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Player1MovementActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Player1MovementActions" />
        public void AddCallbacks(IPlayer1MovementActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1MovementActionsCallbackInterfaces.Add(instance);
            @teamMovement.started += instance.OnTeamMovement;
            @teamMovement.performed += instance.OnTeamMovement;
            @teamMovement.canceled += instance.OnTeamMovement;
            @SelectPreviousFinger.started += instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.performed += instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.canceled += instance.OnSelectPreviousFinger;
            @SelectNextFinger.started += instance.OnSelectNextFinger;
            @SelectNextFinger.performed += instance.OnSelectNextFinger;
            @SelectNextFinger.canceled += instance.OnSelectNextFinger;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Player1MovementActions" />
        private void UnregisterCallbacks(IPlayer1MovementActions instance)
        {
            @teamMovement.started -= instance.OnTeamMovement;
            @teamMovement.performed -= instance.OnTeamMovement;
            @teamMovement.canceled -= instance.OnTeamMovement;
            @SelectPreviousFinger.started -= instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.performed -= instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.canceled -= instance.OnSelectPreviousFinger;
            @SelectNextFinger.started -= instance.OnSelectNextFinger;
            @SelectNextFinger.performed -= instance.OnSelectNextFinger;
            @SelectNextFinger.canceled -= instance.OnSelectNextFinger;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Player1MovementActions.UnregisterCallbacks(IPlayer1MovementActions)" />.
        /// </summary>
        /// <seealso cref="Player1MovementActions.UnregisterCallbacks(IPlayer1MovementActions)" />
        public void RemoveCallbacks(IPlayer1MovementActions instance)
        {
            if (m_Wrapper.m_Player1MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Player1MovementActions.AddCallbacks(IPlayer1MovementActions)" />
        /// <seealso cref="Player1MovementActions.RemoveCallbacks(IPlayer1MovementActions)" />
        /// <seealso cref="Player1MovementActions.UnregisterCallbacks(IPlayer1MovementActions)" />
        public void SetCallbacks(IPlayer1MovementActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Player1MovementActions" /> instance referencing this action map.
    /// </summary>
    public Player1MovementActions @Player1Movement => new Player1MovementActions(this);

    // Player2Movement
    private readonly InputActionMap m_Player2Movement;
    private List<IPlayer2MovementActions> m_Player2MovementActionsCallbackInterfaces = new List<IPlayer2MovementActions>();
    private readonly InputAction m_Player2Movement_teamMovement;
    private readonly InputAction m_Player2Movement_SelectPreviousFinger;
    private readonly InputAction m_Player2Movement_SelectNextFinger;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player2Movement".
    /// </summary>
    public struct Player2MovementActions
    {
        private @InputScheme m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Player2MovementActions(@InputScheme wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player2Movement/teamMovement".
        /// </summary>
        public InputAction @teamMovement => m_Wrapper.m_Player2Movement_teamMovement;
        /// <summary>
        /// Provides access to the underlying input action "Player2Movement/SelectPreviousFinger".
        /// </summary>
        public InputAction @SelectPreviousFinger => m_Wrapper.m_Player2Movement_SelectPreviousFinger;
        /// <summary>
        /// Provides access to the underlying input action "Player2Movement/SelectNextFinger".
        /// </summary>
        public InputAction @SelectNextFinger => m_Wrapper.m_Player2Movement_SelectNextFinger;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player2Movement; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Player2MovementActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Player2MovementActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Player2MovementActions" />
        public void AddCallbacks(IPlayer2MovementActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2MovementActionsCallbackInterfaces.Add(instance);
            @teamMovement.started += instance.OnTeamMovement;
            @teamMovement.performed += instance.OnTeamMovement;
            @teamMovement.canceled += instance.OnTeamMovement;
            @SelectPreviousFinger.started += instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.performed += instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.canceled += instance.OnSelectPreviousFinger;
            @SelectNextFinger.started += instance.OnSelectNextFinger;
            @SelectNextFinger.performed += instance.OnSelectNextFinger;
            @SelectNextFinger.canceled += instance.OnSelectNextFinger;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Player2MovementActions" />
        private void UnregisterCallbacks(IPlayer2MovementActions instance)
        {
            @teamMovement.started -= instance.OnTeamMovement;
            @teamMovement.performed -= instance.OnTeamMovement;
            @teamMovement.canceled -= instance.OnTeamMovement;
            @SelectPreviousFinger.started -= instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.performed -= instance.OnSelectPreviousFinger;
            @SelectPreviousFinger.canceled -= instance.OnSelectPreviousFinger;
            @SelectNextFinger.started -= instance.OnSelectNextFinger;
            @SelectNextFinger.performed -= instance.OnSelectNextFinger;
            @SelectNextFinger.canceled -= instance.OnSelectNextFinger;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Player2MovementActions.UnregisterCallbacks(IPlayer2MovementActions)" />.
        /// </summary>
        /// <seealso cref="Player2MovementActions.UnregisterCallbacks(IPlayer2MovementActions)" />
        public void RemoveCallbacks(IPlayer2MovementActions instance)
        {
            if (m_Wrapper.m_Player2MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Player2MovementActions.AddCallbacks(IPlayer2MovementActions)" />
        /// <seealso cref="Player2MovementActions.RemoveCallbacks(IPlayer2MovementActions)" />
        /// <seealso cref="Player2MovementActions.UnregisterCallbacks(IPlayer2MovementActions)" />
        public void SetCallbacks(IPlayer2MovementActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Player2MovementActions" /> instance referencing this action map.
    /// </summary>
    public Player2MovementActions @Player2Movement => new Player2MovementActions(this);
    private int m_NewControlSchemeSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme NewControlSchemeScheme
    {
        get
        {
            if (m_NewControlSchemeSchemeIndex == -1) m_NewControlSchemeSchemeIndex = asset.FindControlSchemeIndex("New Control Scheme");
            return asset.controlSchemes[m_NewControlSchemeSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player1Movement" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Player1MovementActions.AddCallbacks(IPlayer1MovementActions)" />
    /// <seealso cref="Player1MovementActions.RemoveCallbacks(IPlayer1MovementActions)" />
    public interface IPlayer1MovementActions
    {
        /// <summary>
        /// Method invoked when associated input action "teamMovement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeamMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectPreviousFinger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectPreviousFinger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectNextFinger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectNextFinger(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player2Movement" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Player2MovementActions.AddCallbacks(IPlayer2MovementActions)" />
    /// <seealso cref="Player2MovementActions.RemoveCallbacks(IPlayer2MovementActions)" />
    public interface IPlayer2MovementActions
    {
        /// <summary>
        /// Method invoked when associated input action "teamMovement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeamMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectPreviousFinger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectPreviousFinger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectNextFinger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectNextFinger(InputAction.CallbackContext context);
    }
}
